//
//  ProductsListPresenter.swift
//  Dubizzle
//
//  Created Muhammad Haseeb Siddiqui on 4/4/22.
//  Copyright Â© 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Muhammad Haseeb Siddiqui
//

import UIKit

class ProductsListPresenter: ProductsListPresenterProtocol {

    weak private var view: ProductsListViewProtocol?
    var interactor: ProductsListInteractorInputProtocol?
    private let router: ProductsListWireframeProtocol
    
    var listOfProductsViewModel = [ProductListItemViewModel]()

    init(interface: ProductsListViewProtocol, interactor: ProductsListInteractorInputProtocol?, router: ProductsListWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }

    func viewLoaded() {
        self.view?.displayLoader()
        self.interactor?.getProductsList()
    }
    
}

extension ProductsListPresenter: ProductsListInteractorOutputProtocol {
    
    func presentListOfProducts(_ products: [ProductEntity]) {
        
        view?.hideLoader()
        listOfProductsViewModel.removeAll()
        for entity in products {
            let viewModel = ProductListItemViewModel(from: entity) {
                // this closure will be called when cell is tapped :)
                self.router.routeToProductDetail(with: entity)
            }
            listOfProductsViewModel.append(viewModel)
        }
        view?.displayProductList(with: listOfProductsViewModel)
    }
  
    func presentErrorInFetchingProductsList(with error: Error) {
        view?.displayErrorMsg(error.localizedDescription)
    }

}
